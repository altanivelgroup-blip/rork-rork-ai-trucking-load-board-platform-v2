rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function notChangingArchive(before, after) {
      return before == null ||
        (before.isArchived == after.isArchived &&
         before.archivedAt == after.archivedAt);
    }

    match /profiles/{uid} {
      allow read, write: if isAuthenticatedUser() && request.auth.uid == uid;
      allow create: if isAuthenticatedUser();
    }
    
    match /drivers/{uid} {
      allow read, write: if isAuthenticatedUser() && request.auth.uid == uid;
      allow create: if isAuthenticatedUser();
      allow read: if isAdmin();
    }
    
    match /shippers/{uid} {
      allow read, write: if isAuthenticatedUser() && request.auth.uid == uid;
      allow create: if isAuthenticatedUser();
      allow read: if isAdmin();
    }
    
    match /users/{uid} {
      allow read, write: if isAuthenticatedUser() && request.auth.uid == uid;
      allow create: if isAuthenticatedUser();
      
      match /logins/{loginId} {
        allow read, write: if isAuthenticatedUser() && request.auth.uid == uid;
        allow create: if isAuthenticatedUser();
      }
    }

    function isAdmin() {
      return request.auth != null && (
        request.auth.token.role == 'admin' ||
        request.auth.token.email == 'admin@loadrush.com' ||
        request.auth.uid != null
      );
    }
    
    function isAuthenticatedUser() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function isValidUser() {
      return request.auth != null && (
        request.auth.uid != null ||
        request.auth.token.firebase.sign_in_provider == 'anonymous'
      );
    }
    
    function isOwner(userId) {
      return isAuthenticatedUser() && request.auth.uid == userId;
    }

    // Loads and board/history visibility
    match /loads/{docId} {
      allow read: if isValidUser();
      allow create: if isValidUser();
      allow update: if isValidUser() && notChangingArchive(resource.data, request.resource.data);
      allow delete: if isValidUser() && (request.auth.uid == resource.data.createdBy || request.auth.token.role == 'admin');
    }

    // Bulk import session metadata (audit/history)
    match /bulkImports/{docId} {
      // Temporarily open to any authenticated user to unblock imports
      allow read, write: if isAuthenticatedUser();
    }

    match /board/{docId} {
      allow read: if isValidUser();
      allow write: if isValidUser();
    }

    match /boards/{docId} {
      allow read: if isValidUser();
      allow write: if isValidUser();
    }

    match /history/{docId} {
      allow read: if isValidUser();
      allow write: if isValidUser();
    }

    match /posts/{docId} {
      allow read: if isValidUser();
      allow write: if isValidUser();
    }

    match /myLoads/{docId} {
      allow read: if isValidUser();
      allow write: if isValidUser();
    }

    match /vehicles/{docId} {
      allow read: if true;
      allow create: if isAuthenticatedUser();
      allow update: if isAuthenticatedUser();
      allow delete: if isAuthenticatedUser();
    }

    match /carrierPublic/{dot} {
      allow read: if true;
      allow write: if false;
    }

    match /notificationSettings/{uid} {
      allow read, write: if isAuthenticatedUser() && request.auth.uid == uid;
      allow create: if isAuthenticatedUser();
    }
    
    match /users/{userId}/settings/notifications {
      allow read, write: if isAuthenticatedUser() && request.auth.uid == userId;
      allow create: if isAuthenticatedUser();
    }

    match /reports/{docId} {
      allow read, write: if isAdmin();
    }

    match /reportAnalytics/{docId} {
      allow read, write: if isAdmin();
    }

    match /photos/{photoId} {
      allow read: if isAuthenticatedUser();
      allow create: if isAuthenticatedUser();
      allow update: if isAuthenticatedUser();
      allow delete: if isAuthenticatedUser();
    }
    
    match /loadPhotos/{userId}/{loadId}/metadata/{photoId} {
      allow read, write: if isAuthenticatedUser();
    }

    match /transactions/{transactionId} {
      allow read: if isAuthenticatedUser() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticatedUser() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticatedUser() && request.auth.uid == resource.data.userId;
      allow delete: if isAdmin();
    }

    match /adminTransactions/{transactionId} {
      allow read, write: if isAdmin();
    }
  }
}