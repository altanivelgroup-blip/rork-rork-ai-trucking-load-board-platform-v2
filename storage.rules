// PERMANENT FIX: Simplified storage rules for maximum compatibility
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function for authentication
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function isAdmin() {
      return request.auth != null
        && (request.auth.token.admin == true || request.auth.token.role == 'admin');
    }

    // ✅ PERMANENT FIX: Load photos - allow all authenticated users
    match /loadPhotos/{userId}/{loadId}/{fileName} {
      allow read: if true; // Public read access
      allow write, create, update, delete: if isAuthenticated();
    }

    // ✅ PERMANENT FIX: Vehicle photos - allow all authenticated users  
    match /vehiclePhotos/{userId}/{vehicleId}/{fileName} {
      allow read: if true; // Public read access
      allow write, create, update, delete: if isAuthenticated();
    }
    
    // ✅ PERMANENT FIX: Generic photo paths - allow all authenticated users
    match /photos/{userId}/{photoId} {
      allow read: if true; // Public read access
      allow write, create, update, delete: if isAuthenticated();
    }
    
    // ✅ PERMANENT FIX: User-specific paths - allow all authenticated users
    match /users/{userId}/photos/{allPaths=**} {
      allow read: if true; // Public read access
      allow write, create, update, delete: if isAuthenticated();
    }
    
    // ✅ PERMANENT FIX: Comprehensive fallback - allow all photo uploads for authenticated users
    match /{allPaths=**} {
      allow read: if true; // Allow all reads
      allow write, create, update, delete: if isAuthenticated();
    }
  }
}