// ROLLBACK RULES - Step 1: Simplified rules to fix upload/post crashes
// Backup created: storage.rules.backup.rollback
// Log: Rollback rules implemented - loosened permissions for authenticated users
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Simplified admin check
    function isAdmin() {
      return request.auth != null
        && (request.auth.token.admin == true || request.auth.token.role == 'admin');
    }

    // Simplified auth check
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // ROLLBACK: Simplified load photos rule - allow all authenticated operations
    match /loadPhotos/{userId}/{loadId}/{fileName} {
      allow read: if true; // Allow all reads to prevent fetch failures
      allow write: if isAuthenticated(); // Any authenticated user can upload
      allow update: if isAuthenticated(); // Any authenticated user can update
      allow delete: if isAuthenticated(); // Any authenticated user can delete
    }

    // ROLLBACK: Simplified vehicle photos rule
    match /vehiclePhotos/{userId}/{vehicleId}/{fileName} {
      allow read: if true; // Allow all reads
      allow write: if isAuthenticated(); // Any authenticated user can upload
      allow update: if isAuthenticated(); // Any authenticated user can update
      allow delete: if isAuthenticated(); // Any authenticated user can delete
    }
    
    // ROLLBACK: Broad fallback rule for all photo paths
    match /{allPaths=**} {
      allow read: if true; // Allow all reads to prevent fetch failures
      allow write: if isAuthenticated() && 
        (allPaths.matches('.*Photos/.*') || allPaths.matches('.*photos/.*') || allPaths.matches('.*images/.*'));
    }

    // Admin-only report files
    match /reports/{allPaths=**} { 
      allow read, write: if isAdmin(); 
    }
    
    match /reportAnalytics/{allPaths=**} { 
      allow read, write: if isAdmin(); 
    }
  }
}